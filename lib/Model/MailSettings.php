<?php
/**
 * MailSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * MailSettings Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MailSettings implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'MailSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'bcc' => 'string',
        'default_from' => 'string',
        'reply_to' => 'string',
        'text_header' => 'string',
        'text_footer' => 'string',
        'html_header' => 'string',
        'html_footer' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'bcc' => 'bcc',
        'default_from' => 'default_from',
        'reply_to' => 'reply_to',
        'text_header' => 'text_header',
        'text_footer' => 'text_footer',
        'html_header' => 'html_header',
        'html_footer' => 'html_footer'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'bcc' => 'setBcc',
        'default_from' => 'setDefaultFrom',
        'reply_to' => 'setReplyTo',
        'text_header' => 'setTextHeader',
        'text_footer' => 'setTextFooter',
        'html_header' => 'setHtmlHeader',
        'html_footer' => 'setHtmlFooter'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'bcc' => 'getBcc',
        'default_from' => 'getDefaultFrom',
        'reply_to' => 'getReplyTo',
        'text_header' => 'getTextHeader',
        'text_footer' => 'getTextFooter',
        'html_header' => 'getHtmlHeader',
        'html_footer' => 'getHtmlFooter'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bcc'] = isset($data['bcc']) ? $data['bcc'] : null;
        $this->container['default_from'] = isset($data['default_from']) ? $data['default_from'] : null;
        $this->container['reply_to'] = isset($data['reply_to']) ? $data['reply_to'] : null;
        $this->container['text_header'] = isset($data['text_header']) ? $data['text_header'] : null;
        $this->container['text_footer'] = isset($data['text_footer']) ? $data['text_footer'] : null;
        $this->container['html_header'] = isset($data['html_header']) ? $data['html_header'] : null;
        $this->container['html_footer'] = isset($data['html_footer']) ? $data['html_footer'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['default_from'] === null) {
            $invalid_properties[] = "'default_from' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['default_from'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets bcc
     * @return string
     */
    public function getBcc()
    {
        return $this->container['bcc'];
    }

    /**
     * Sets bcc
     * @param string $bcc Optional Bcc email address to use for all mails. Rfc 822 address.
     * @return $this
     */
    public function setBcc($bcc)
    {
        $this->container['bcc'] = $bcc;

        return $this;
    }

    /**
     * Gets default_from
     * @return string
     */
    public function getDefaultFrom()
    {
        return $this->container['default_from'];
    }

    /**
     * Sets default_from
     * @param string $default_from Default email sender address. Rfc 822 address.
     * @return $this
     */
    public function setDefaultFrom($default_from)
    {
        $this->container['default_from'] = $default_from;

        return $this;
    }

    /**
     * Gets reply_to
     * @return string
     */
    public function getReplyTo()
    {
        return $this->container['reply_to'];
    }

    /**
     * Sets reply_to
     * @param string $reply_to Optional Reply-To email address. Rfc 822 address.
     * @return $this
     */
    public function setReplyTo($reply_to)
    {
        $this->container['reply_to'] = $reply_to;

        return $this;
    }

    /**
     * Gets text_header
     * @return string
     */
    public function getTextHeader()
    {
        return $this->container['text_header'];
    }

    /**
     * Sets text_header
     * @param string $text_header Optional custom text header that can be used in all emails
     * @return $this
     */
    public function setTextHeader($text_header)
    {
        $this->container['text_header'] = $text_header;

        return $this;
    }

    /**
     * Gets text_footer
     * @return string
     */
    public function getTextFooter()
    {
        return $this->container['text_footer'];
    }

    /**
     * Sets text_footer
     * @param string $text_footer Optional custom text footer that can be used in all emails
     * @return $this
     */
    public function setTextFooter($text_footer)
    {
        $this->container['text_footer'] = $text_footer;

        return $this;
    }

    /**
     * Gets html_header
     * @return string
     */
    public function getHtmlHeader()
    {
        return $this->container['html_header'];
    }

    /**
     * Sets html_header
     * @param string $html_header Optional custom html header that can be used in all emails
     * @return $this
     */
    public function setHtmlHeader($html_header)
    {
        $this->container['html_header'] = $html_header;

        return $this;
    }

    /**
     * Gets html_footer
     * @return string
     */
    public function getHtmlFooter()
    {
        return $this->container['html_footer'];
    }

    /**
     * Sets html_footer
     * @param string $html_footer Optional custom html footer that can be used in all emails
     * @return $this
     */
    public function setHtmlFooter($html_footer)
    {
        $this->container['html_footer'] = $html_footer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


