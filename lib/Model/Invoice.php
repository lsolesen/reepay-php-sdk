<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Invoice Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Invoice implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'string',
        'customer' => 'string',
        'subscription' => 'string',
        'plan' => 'string',
        'state' => 'string',
        'amount' => 'int',
        'number' => 'int',
        'currency' => 'string',
        'due' => '\DateTime',
        'failed' => '\DateTime',
        'settled' => '\DateTime',
        'cancelled' => '\DateTime',
        'credits' => '\Swagger\Client\Model\CreditInvoice[]',
        'adjustments' => '\Swagger\Client\Model\InvoiceAdjustment[]',
        'created' => '\DateTime',
        'plan_version' => 'int',
        'dunning_plan' => 'string',
        'discount_amount' => 'int',
        'org_amount' => 'int',
        'amount_vat' => 'int',
        'amount_ex_vat' => 'int',
        'settled_amount' => 'int',
        'refunded_amount' => 'int',
        'period_number' => 'int',
        'order_lines' => '\Swagger\Client\Model\OrderLine[]',
        'additional_costs' => 'string[]',
        'card_transactions' => '\Swagger\Client\Model\CardTransaction[]',
        'manual_transactions' => '\Swagger\Client\Model\ManualTransaction[]',
        'credit_notes' => '\Swagger\Client\Model\InvoiceCreditNote[]',
        'dunning_start' => '\DateTime',
        'dunning_count' => 'int',
        'dunning_expired' => '\DateTime',
        'period_from' => '\DateTime',
        'period_to' => '\DateTime'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'customer' => 'customer',
        'subscription' => 'subscription',
        'plan' => 'plan',
        'state' => 'state',
        'amount' => 'amount',
        'number' => 'number',
        'currency' => 'currency',
        'due' => 'due',
        'failed' => 'failed',
        'settled' => 'settled',
        'cancelled' => 'cancelled',
        'credits' => 'credits',
        'adjustments' => 'adjustments',
        'created' => 'created',
        'plan_version' => 'plan_version',
        'dunning_plan' => 'dunning_plan',
        'discount_amount' => 'discount_amount',
        'org_amount' => 'org_amount',
        'amount_vat' => 'amount_vat',
        'amount_ex_vat' => 'amount_ex_vat',
        'settled_amount' => 'settled_amount',
        'refunded_amount' => 'refunded_amount',
        'period_number' => 'period_number',
        'order_lines' => 'order_lines',
        'additional_costs' => 'additional_costs',
        'card_transactions' => 'card_transactions',
        'manual_transactions' => 'manual_transactions',
        'credit_notes' => 'credit_notes',
        'dunning_start' => 'dunning_start',
        'dunning_count' => 'dunning_count',
        'dunning_expired' => 'dunning_expired',
        'period_from' => 'period_from',
        'period_to' => 'period_to'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'customer' => 'setCustomer',
        'subscription' => 'setSubscription',
        'plan' => 'setPlan',
        'state' => 'setState',
        'amount' => 'setAmount',
        'number' => 'setNumber',
        'currency' => 'setCurrency',
        'due' => 'setDue',
        'failed' => 'setFailed',
        'settled' => 'setSettled',
        'cancelled' => 'setCancelled',
        'credits' => 'setCredits',
        'adjustments' => 'setAdjustments',
        'created' => 'setCreated',
        'plan_version' => 'setPlanVersion',
        'dunning_plan' => 'setDunningPlan',
        'discount_amount' => 'setDiscountAmount',
        'org_amount' => 'setOrgAmount',
        'amount_vat' => 'setAmountVat',
        'amount_ex_vat' => 'setAmountExVat',
        'settled_amount' => 'setSettledAmount',
        'refunded_amount' => 'setRefundedAmount',
        'period_number' => 'setPeriodNumber',
        'order_lines' => 'setOrderLines',
        'additional_costs' => 'setAdditionalCosts',
        'card_transactions' => 'setCardTransactions',
        'manual_transactions' => 'setManualTransactions',
        'credit_notes' => 'setCreditNotes',
        'dunning_start' => 'setDunningStart',
        'dunning_count' => 'setDunningCount',
        'dunning_expired' => 'setDunningExpired',
        'period_from' => 'setPeriodFrom',
        'period_to' => 'setPeriodTo'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'customer' => 'getCustomer',
        'subscription' => 'getSubscription',
        'plan' => 'getPlan',
        'state' => 'getState',
        'amount' => 'getAmount',
        'number' => 'getNumber',
        'currency' => 'getCurrency',
        'due' => 'getDue',
        'failed' => 'getFailed',
        'settled' => 'getSettled',
        'cancelled' => 'getCancelled',
        'credits' => 'getCredits',
        'adjustments' => 'getAdjustments',
        'created' => 'getCreated',
        'plan_version' => 'getPlanVersion',
        'dunning_plan' => 'getDunningPlan',
        'discount_amount' => 'getDiscountAmount',
        'org_amount' => 'getOrgAmount',
        'amount_vat' => 'getAmountVat',
        'amount_ex_vat' => 'getAmountExVat',
        'settled_amount' => 'getSettledAmount',
        'refunded_amount' => 'getRefundedAmount',
        'period_number' => 'getPeriodNumber',
        'order_lines' => 'getOrderLines',
        'additional_costs' => 'getAdditionalCosts',
        'card_transactions' => 'getCardTransactions',
        'manual_transactions' => 'getManualTransactions',
        'credit_notes' => 'getCreditNotes',
        'dunning_start' => 'getDunningStart',
        'dunning_count' => 'getDunningCount',
        'dunning_expired' => 'getDunningExpired',
        'period_from' => 'getPeriodFrom',
        'period_to' => 'getPeriodTo'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const STATE_PENDING = 'pending';
    const STATE_DUNNING = 'dunning';
    const STATE_SETTLED = 'settled';
    const STATE_CANCELLED = 'cancelled';
    const STATE_FAILED = 'failed';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_PENDING,
            self::STATE_DUNNING,
            self::STATE_SETTLED,
            self::STATE_CANCELLED,
            self::STATE_FAILED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['plan'] = isset($data['plan']) ? $data['plan'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['due'] = isset($data['due']) ? $data['due'] : null;
        $this->container['failed'] = isset($data['failed']) ? $data['failed'] : null;
        $this->container['settled'] = isset($data['settled']) ? $data['settled'] : null;
        $this->container['cancelled'] = isset($data['cancelled']) ? $data['cancelled'] : null;
        $this->container['credits'] = isset($data['credits']) ? $data['credits'] : null;
        $this->container['adjustments'] = isset($data['adjustments']) ? $data['adjustments'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['plan_version'] = isset($data['plan_version']) ? $data['plan_version'] : null;
        $this->container['dunning_plan'] = isset($data['dunning_plan']) ? $data['dunning_plan'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['org_amount'] = isset($data['org_amount']) ? $data['org_amount'] : null;
        $this->container['amount_vat'] = isset($data['amount_vat']) ? $data['amount_vat'] : null;
        $this->container['amount_ex_vat'] = isset($data['amount_ex_vat']) ? $data['amount_ex_vat'] : null;
        $this->container['settled_amount'] = isset($data['settled_amount']) ? $data['settled_amount'] : null;
        $this->container['refunded_amount'] = isset($data['refunded_amount']) ? $data['refunded_amount'] : null;
        $this->container['period_number'] = isset($data['period_number']) ? $data['period_number'] : null;
        $this->container['order_lines'] = isset($data['order_lines']) ? $data['order_lines'] : null;
        $this->container['additional_costs'] = isset($data['additional_costs']) ? $data['additional_costs'] : null;
        $this->container['card_transactions'] = isset($data['card_transactions']) ? $data['card_transactions'] : null;
        $this->container['manual_transactions'] = isset($data['manual_transactions']) ? $data['manual_transactions'] : null;
        $this->container['credit_notes'] = isset($data['credit_notes']) ? $data['credit_notes'] : null;
        $this->container['dunning_start'] = isset($data['dunning_start']) ? $data['dunning_start'] : null;
        $this->container['dunning_count'] = isset($data['dunning_count']) ? $data['dunning_count'] : null;
        $this->container['dunning_expired'] = isset($data['dunning_expired']) ? $data['dunning_expired'] : null;
        $this->container['period_from'] = isset($data['period_from']) ? $data['period_from'] : null;
        $this->container['period_to'] = isset($data['period_to']) ? $data['period_to'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalid_properties[] = "'customer' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalid_properties[] = "'state' can't be null";
        }
        $allowed_values = array("pending", "dunning", "settled", "cancelled", "failed");
        if (!in_array($this->container['state'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'state', must be one of #{allowed_values}.";
        }

        if ($this->container['amount'] === null) {
            $invalid_properties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] < 0.0)) {
            $invalid_properties[] = "invalid value for 'amount', must be bigger than or equal to 0.0.";
        }

        if ($this->container['number'] === null) {
            $invalid_properties[] = "'number' can't be null";
        }
        if (($this->container['number'] < 1.0)) {
            $invalid_properties[] = "invalid value for 'number', must be bigger than or equal to 1.0.";
        }

        if ($this->container['currency'] === null) {
            $invalid_properties[] = "'currency' can't be null";
        }
        if ($this->container['due'] === null) {
            $invalid_properties[] = "'due' can't be null";
        }
        if ($this->container['credits'] === null) {
            $invalid_properties[] = "'credits' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalid_properties[] = "'created' can't be null";
        }
        if ($this->container['discount_amount'] === null) {
            $invalid_properties[] = "'discount_amount' can't be null";
        }
        if (($this->container['discount_amount'] < 0.0)) {
            $invalid_properties[] = "invalid value for 'discount_amount', must be bigger than or equal to 0.0.";
        }

        if ($this->container['org_amount'] === null) {
            $invalid_properties[] = "'org_amount' can't be null";
        }
        if (($this->container['org_amount'] < 0.0)) {
            $invalid_properties[] = "invalid value for 'org_amount', must be bigger than or equal to 0.0.";
        }

        if ($this->container['amount_vat'] === null) {
            $invalid_properties[] = "'amount_vat' can't be null";
        }
        if ($this->container['amount_ex_vat'] === null) {
            $invalid_properties[] = "'amount_ex_vat' can't be null";
        }
        if ($this->container['settled_amount'] === null) {
            $invalid_properties[] = "'settled_amount' can't be null";
        }
        if ($this->container['refunded_amount'] === null) {
            $invalid_properties[] = "'refunded_amount' can't be null";
        }
        if ($this->container['order_lines'] === null) {
            $invalid_properties[] = "'order_lines' can't be null";
        }
        if ($this->container['additional_costs'] === null) {
            $invalid_properties[] = "'additional_costs' can't be null";
        }
        if ($this->container['card_transactions'] === null) {
            $invalid_properties[] = "'card_transactions' can't be null";
        }
        if ($this->container['manual_transactions'] === null) {
            $invalid_properties[] = "'manual_transactions' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['customer'] === null) {
            return false;
        }
        if ($this->container['state'] === null) {
            return false;
        }
        $allowed_values = array("pending", "dunning", "settled", "cancelled", "failed");
        if (!in_array($this->container['state'], $allowed_values)) {
            return false;
        }
        if ($this->container['amount'] === null) {
            return false;
        }
        if ($this->container['amount'] < 0.0) {
            return false;
        }
        if ($this->container['number'] === null) {
            return false;
        }
        if ($this->container['number'] < 1.0) {
            return false;
        }
        if ($this->container['currency'] === null) {
            return false;
        }
        if ($this->container['due'] === null) {
            return false;
        }
        if ($this->container['credits'] === null) {
            return false;
        }
        if ($this->container['created'] === null) {
            return false;
        }
        if ($this->container['discount_amount'] === null) {
            return false;
        }
        if ($this->container['discount_amount'] < 0.0) {
            return false;
        }
        if ($this->container['org_amount'] === null) {
            return false;
        }
        if ($this->container['org_amount'] < 0.0) {
            return false;
        }
        if ($this->container['amount_vat'] === null) {
            return false;
        }
        if ($this->container['amount_ex_vat'] === null) {
            return false;
        }
        if ($this->container['settled_amount'] === null) {
            return false;
        }
        if ($this->container['refunded_amount'] === null) {
            return false;
        }
        if ($this->container['order_lines'] === null) {
            return false;
        }
        if ($this->container['additional_costs'] === null) {
            return false;
        }
        if ($this->container['card_transactions'] === null) {
            return false;
        }
        if ($this->container['manual_transactions'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Invoice id assigned by Reepay
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customer
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     * @param string $customer Customer handle
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets subscription
     * @return string
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     * @param string $subscription Subscription handle, will be null for a one-time customer invoice
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets plan
     * @return string
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     * @param string $plan Subscription plan handle for the plan used to automatically create the invoice. Will be null for one-time invoices.
     * @return $this
     */
    public function setPlan($plan)
    {
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state The invoice state one of the following: `pending`, `dunning`, `settled`, `cancelled`, `failed`
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array('pending', 'dunning', 'settled', 'cancelled', 'failed');
        if (!in_array($state, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'pending', 'dunning', 'settled', 'cancelled', 'failed'");
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets amount
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param int $amount The invoice amount including VAT
     * @return $this
     */
    public function setAmount($amount)
    {

        if ($amount < 0.0) {
            throw new \InvalidArgumentException('invalid value for $amount when calling Invoice., must be bigger than or equal to 0.0.');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets number
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     * @param int $number Sequential invoice number
     * @return $this
     */
    public function setNumber($number)
    {

        if ($number < 1.0) {
            throw new \InvalidArgumentException('invalid value for $number when calling Invoice., must be bigger than or equal to 1.0.');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency Currency for the account in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets due
     * @return \DateTime
     */
    public function getDue()
    {
        return $this->container['due'];
    }

    /**
     * Sets due
     * @param \DateTime $due When is the invoice due, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setDue($due)
    {
        $this->container['due'] = $due;

        return $this;
    }

    /**
     * Gets failed
     * @return \DateTime
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     * @param \DateTime $failed When the invoice failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setFailed($failed)
    {
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets settled
     * @return \DateTime
     */
    public function getSettled()
    {
        return $this->container['settled'];
    }

    /**
     * Sets settled
     * @param \DateTime $settled When the invoice settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setSettled($settled)
    {
        $this->container['settled'] = $settled;

        return $this;
    }

    /**
     * Gets cancelled
     * @return \DateTime
     */
    public function getCancelled()
    {
        return $this->container['cancelled'];
    }

    /**
     * Sets cancelled
     * @param \DateTime $cancelled When the invoice was cancelled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setCancelled($cancelled)
    {
        $this->container['cancelled'] = $cancelled;

        return $this;
    }

    /**
     * Gets credits
     * @return \Swagger\Client\Model\CreditInvoice[]
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     * @param \Swagger\Client\Model\CreditInvoice[] $credits Credits applied to invoice
     * @return $this
     */
    public function setCredits($credits)
    {
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets adjustments
     * @return \Swagger\Client\Model\InvoiceAdjustment[]
     */
    public function getAdjustments()
    {
        return $this->container['adjustments'];
    }

    /**
     * Sets adjustments
     * @param \Swagger\Client\Model\InvoiceAdjustment[] $adjustments Invoice adjustments
     * @return $this
     */
    public function setAdjustments($adjustments)
    {
        $this->container['adjustments'] = $adjustments;

        return $this;
    }

    /**
     * Gets created
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param \DateTime $created When the invoice was created, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets plan_version
     * @return int
     */
    public function getPlanVersion()
    {
        return $this->container['plan_version'];
    }

    /**
     * Sets plan_version
     * @param int $plan_version Subscription plan version
     * @return $this
     */
    public function setPlanVersion($plan_version)
    {
        $this->container['plan_version'] = $plan_version;

        return $this;
    }

    /**
     * Gets dunning_plan
     * @return string
     */
    public function getDunningPlan()
    {
        return $this->container['dunning_plan'];
    }

    /**
     * Sets dunning_plan
     * @param string $dunning_plan Dunning plan handle
     * @return $this
     */
    public function setDunningPlan($dunning_plan)
    {
        $this->container['dunning_plan'] = $dunning_plan;

        return $this;
    }

    /**
     * Gets discount_amount
     * @return int
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     * @param int $discount_amount The potential discount amount deducted from the invoice amount including VAT
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {

        if ($discount_amount < 0.0) {
            throw new \InvalidArgumentException('invalid value for $discount_amount when calling Invoice., must be bigger than or equal to 0.0.');
        }
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets org_amount
     * @return int
     */
    public function getOrgAmount()
    {
        return $this->container['org_amount'];
    }

    /**
     * Sets org_amount
     * @param int $org_amount The invoice original amount including VAT, may differ from amount if adjustments have been applied for the invoice
     * @return $this
     */
    public function setOrgAmount($org_amount)
    {

        if ($org_amount < 0.0) {
            throw new \InvalidArgumentException('invalid value for $org_amount when calling Invoice., must be bigger than or equal to 0.0.');
        }
        $this->container['org_amount'] = $org_amount;

        return $this;
    }

    /**
     * Gets amount_vat
     * @return int
     */
    public function getAmountVat()
    {
        return $this->container['amount_vat'];
    }

    /**
     * Sets amount_vat
     * @param int $amount_vat The invoice vat amount calculated as rounded summed fractional vats for each orderline
     * @return $this
     */
    public function setAmountVat($amount_vat)
    {
        $this->container['amount_vat'] = $amount_vat;

        return $this;
    }

    /**
     * Gets amount_ex_vat
     * @return int
     */
    public function getAmountExVat()
    {
        return $this->container['amount_ex_vat'];
    }

    /**
     * Sets amount_ex_vat
     * @param int $amount_ex_vat The invoice amount without vat
     * @return $this
     */
    public function setAmountExVat($amount_ex_vat)
    {
        $this->container['amount_ex_vat'] = $amount_ex_vat;

        return $this;
    }

    /**
     * Gets settled_amount
     * @return int
     */
    public function getSettledAmount()
    {
        return $this->container['settled_amount'];
    }

    /**
     * Sets settled_amount
     * @param int $settled_amount Settled amount
     * @return $this
     */
    public function setSettledAmount($settled_amount)
    {
        $this->container['settled_amount'] = $settled_amount;

        return $this;
    }

    /**
     * Gets refunded_amount
     * @return int
     */
    public function getRefundedAmount()
    {
        return $this->container['refunded_amount'];
    }

    /**
     * Sets refunded_amount
     * @param int $refunded_amount Refunded amount
     * @return $this
     */
    public function setRefundedAmount($refunded_amount)
    {
        $this->container['refunded_amount'] = $refunded_amount;

        return $this;
    }

    /**
     * Gets period_number
     * @return int
     */
    public function getPeriodNumber()
    {
        return $this->container['period_number'];
    }

    /**
     * Sets period_number
     * @param int $period_number The subscription period this invoice is for
     * @return $this
     */
    public function setPeriodNumber($period_number)
    {
        $this->container['period_number'] = $period_number;

        return $this;
    }

    /**
     * Gets order_lines
     * @return \Swagger\Client\Model\OrderLine[]
     */
    public function getOrderLines()
    {
        return $this->container['order_lines'];
    }

    /**
     * Sets order_lines
     * @param \Swagger\Client\Model\OrderLine[] $order_lines Order lines for invoice sorted by descending timestamp
     * @return $this
     */
    public function setOrderLines($order_lines)
    {
        $this->container['order_lines'] = $order_lines;

        return $this;
    }

    /**
     * Gets additional_costs
     * @return string[]
     */
    public function getAdditionalCosts()
    {
        return $this->container['additional_costs'];
    }

    /**
     * Sets additional_costs
     * @param string[] $additional_costs Additional costs for invoice
     * @return $this
     */
    public function setAdditionalCosts($additional_costs)
    {
        $this->container['additional_costs'] = $additional_costs;

        return $this;
    }

    /**
     * Gets card_transactions
     * @return \Swagger\Client\Model\CardTransaction[]
     */
    public function getCardTransactions()
    {
        return $this->container['card_transactions'];
    }

    /**
     * Sets card_transactions
     * @param \Swagger\Client\Model\CardTransaction[] $card_transactions Invoice card transactions
     * @return $this
     */
    public function setCardTransactions($card_transactions)
    {
        $this->container['card_transactions'] = $card_transactions;

        return $this;
    }

    /**
     * Gets manual_transactions
     * @return \Swagger\Client\Model\ManualTransaction[]
     */
    public function getManualTransactions()
    {
        return $this->container['manual_transactions'];
    }

    /**
     * Sets manual_transactions
     * @param \Swagger\Client\Model\ManualTransaction[] $manual_transactions Invoice manual transactions
     * @return $this
     */
    public function setManualTransactions($manual_transactions)
    {
        $this->container['manual_transactions'] = $manual_transactions;

        return $this;
    }

    /**
     * Gets credit_notes
     * @return \Swagger\Client\Model\InvoiceCreditNote[]
     */
    public function getCreditNotes()
    {
        return $this->container['credit_notes'];
    }

    /**
     * Sets credit_notes
     * @param \Swagger\Client\Model\InvoiceCreditNote[] $credit_notes Invoice credit notes
     * @return $this
     */
    public function setCreditNotes($credit_notes)
    {
        $this->container['credit_notes'] = $credit_notes;

        return $this;
    }

    /**
     * Gets dunning_start
     * @return \DateTime
     */
    public function getDunningStart()
    {
        return $this->container['dunning_start'];
    }

    /**
     * Sets dunning_start
     * @param \DateTime $dunning_start When dunning for the invoice was started, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setDunningStart($dunning_start)
    {
        $this->container['dunning_start'] = $dunning_start;

        return $this;
    }

    /**
     * Gets dunning_count
     * @return int
     */
    public function getDunningCount()
    {
        return $this->container['dunning_count'];
    }

    /**
     * Sets dunning_count
     * @param int $dunning_count Number of dunning events for invoice (number of reminders sent)
     * @return $this
     */
    public function setDunningCount($dunning_count)
    {
        $this->container['dunning_count'] = $dunning_count;

        return $this;
    }

    /**
     * Gets dunning_expired
     * @return \DateTime
     */
    public function getDunningExpired()
    {
        return $this->container['dunning_expired'];
    }

    /**
     * Sets dunning_expired
     * @param \DateTime $dunning_expired When dunning for the invoice expired, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setDunningExpired($dunning_expired)
    {
        $this->container['dunning_expired'] = $dunning_expired;

        return $this;
    }

    /**
     * Gets period_from
     * @return \DateTime
     */
    public function getPeriodFrom()
    {
        return $this->container['period_from'];
    }

    /**
     * Sets period_from
     * @param \DateTime $period_from The start of billing period if the invoice is for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setPeriodFrom($period_from)
    {
        $this->container['period_from'] = $period_from;

        return $this;
    }

    /**
     * Gets period_to
     * @return \DateTime
     */
    public function getPeriodTo()
    {
        return $this->container['period_to'];
    }

    /**
     * Sets period_to
     * @param \DateTime $period_to The end of billing period if the invoice is for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setPeriodTo($period_to)
    {
        $this->container['period_to'] = $period_to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


