<?php
/**
 * InvoiceApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return InvoiceApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation cancelAllDunningPending
     *
     * Cancel all dunning and pending
     *
     * @param string $handle Subscriptiom handle (required)
     * @return \Swagger\Client\Model\Invoice[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelAllDunningPending($handle)
    {
        list($response) = $this->cancelAllDunningPendingWithHttpInfo($handle);
        return $response;
    }

    /**
     * Operation cancelAllDunningPendingWithHttpInfo
     *
     * Cancel all dunning and pending
     *
     * @param string $handle Subscriptiom handle (required)
     * @return Array of \Swagger\Client\Model\Invoice[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelAllDunningPendingWithHttpInfo($handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling cancelAllDunningPending');
        }
        // parse inputs
        $resourcePath = "/v1/invoice/cancel_all_dunning_pending/subscription/{handle}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Invoice[]',
                '/v1/invoice/cancel_all_dunning_pending/subscription/{handle}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Invoice[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Invoice[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cancelInvoice
     *
     * Cancel invoice
     *
     * @param string $id Invoice id (required)
     * @return \Swagger\Client\Model\Invoice
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelInvoice($id)
    {
        list($response) = $this->cancelInvoiceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation cancelInvoiceWithHttpInfo
     *
     * Cancel invoice
     *
     * @param string $id Invoice id (required)
     * @return Array of \Swagger\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelInvoiceWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling cancelInvoice');
        }
        // parse inputs
        $resourcePath = "/v1/invoice/{id}/cancel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Invoice',
                '/v1/invoice/{id}/cancel'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Invoice', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Invoice', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getInvoice
     *
     * Get invoice
     *
     * @param string $id Invoice id (required)
     * @return \Swagger\Client\Model\Invoice
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getInvoice($id)
    {
        list($response) = $this->getInvoiceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getInvoiceWithHttpInfo
     *
     * Get invoice
     *
     * @param string $id Invoice id (required)
     * @return Array of \Swagger\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getInvoiceWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getInvoice');
        }
        // parse inputs
        $resourcePath = "/v1/invoice/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Invoice',
                '/v1/invoice/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Invoice', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Invoice', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getInvoices
     *
     * Get list of invoices
     *
     * @param int $page Page number to get (optional, default to 1)
     * @param int $size Page size to use (optional, default to 20)
     * @param string $search Optional search expression (optional)
     * @param string $sort Optional sorting expression (optional)
     * @return \Swagger\Client\Model\InvoiceSearch
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getInvoices($page = null, $size = null, $search = null, $sort = null)
    {
        list($response) = $this->getInvoicesWithHttpInfo($page, $size, $search, $sort);
        return $response;
    }

    /**
     * Operation getInvoicesWithHttpInfo
     *
     * Get list of invoices
     *
     * @param int $page Page number to get (optional, default to 1)
     * @param int $size Page size to use (optional, default to 20)
     * @param string $search Optional search expression (optional)
     * @param string $sort Optional sorting expression (optional)
     * @return Array of \Swagger\Client\Model\InvoiceSearch, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getInvoicesWithHttpInfo($page = null, $size = null, $search = null, $sort = null)
    {
        if (!is_null($page) && ($page < 1.0)) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling InvoiceApi.getInvoices, must be bigger than or equal to 1.0.');
        }

        if (!is_null($size) && ($size > 100.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling InvoiceApi.getInvoices, must be smaller than or equal to 100.0.');
        }
        if (!is_null($size) && ($size < 1.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling InvoiceApi.getInvoices, must be bigger than or equal to 1.0.');
        }

        // parse inputs
        $resourcePath = "/v1/invoice";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InvoiceSearch',
                '/v1/invoice'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvoiceSearch', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvoiceSearch', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation manualSettle
     *
     * Manual settle
     *
     * @param string $id Invoice id (required)
     * @param \Swagger\Client\Model\ManualSettleTransfer $body  (optional)
     * @return \Swagger\Client\Model\Invoice
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function manualSettle($id, $body = null)
    {
        list($response) = $this->manualSettleWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation manualSettleWithHttpInfo
     *
     * Manual settle
     *
     * @param string $id Invoice id (required)
     * @param \Swagger\Client\Model\ManualSettleTransfer $body  (optional)
     * @return Array of \Swagger\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function manualSettleWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling manualSettle');
        }
        // parse inputs
        $resourcePath = "/v1/invoice/{id}/manual_settle";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Invoice',
                '/v1/invoice/{id}/manual_settle'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Invoice', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Invoice', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reactivate
     *
     * Reactivate invoice
     *
     * @param string $id Invoice id (required)
     * @return \Swagger\Client\Model\Invoice
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function reactivate($id)
    {
        list($response) = $this->reactivateWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation reactivateWithHttpInfo
     *
     * Reactivate invoice
     *
     * @param string $id Invoice id (required)
     * @return Array of \Swagger\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function reactivateWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling reactivate');
        }
        // parse inputs
        $resourcePath = "/v1/invoice/{id}/reactivate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Invoice',
                '/v1/invoice/{id}/reactivate'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Invoice', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Invoice', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation refund
     *
     * Refund settled invoice
     *
     * @param string $id Invoice id (required)
     * @param \Swagger\Client\Model\RefundInvoice $body  (optional)
     * @return \Swagger\Client\Model\Invoice
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function refund($id, $body = null)
    {
        list($response) = $this->refundWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation refundWithHttpInfo
     *
     * Refund settled invoice
     *
     * @param string $id Invoice id (required)
     * @param \Swagger\Client\Model\RefundInvoice $body  (optional)
     * @return Array of \Swagger\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function refundWithHttpInfo($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling refund');
        }
        // parse inputs
        $resourcePath = "/v1/invoice/{id}/refund";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Invoice',
                '/v1/invoice/{id}/refund'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Invoice', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Invoice', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation transactionDetails
     *
     * Get card transaction details
     *
     * @param string $id Invoice id (required)
     * @param string $transaction Transaction id (required)
     * @return map[string,object]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function transactionDetails($id, $transaction)
    {
        list($response) = $this->transactionDetailsWithHttpInfo($id, $transaction);
        return $response;
    }

    /**
     * Operation transactionDetailsWithHttpInfo
     *
     * Get card transaction details
     *
     * @param string $id Invoice id (required)
     * @param string $transaction Transaction id (required)
     * @return Array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function transactionDetailsWithHttpInfo($id, $transaction)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling transactionDetails');
        }
        // verify the required parameter 'transaction' is set
        if ($transaction === null) {
            throw new \InvalidArgumentException('Missing the required parameter $transaction when calling transactionDetails');
        }
        // parse inputs
        $resourcePath = "/v1/invoice/{id}/card_transaction/{transaction}/details";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($transaction !== null) {
            $resourcePath = str_replace(
                "{" . "transaction" . "}",
                $this->apiClient->getSerializer()->toPathValue($transaction),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'map[string,object]',
                '/v1/invoice/{id}/card_transaction/{transaction}/details'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'map[string,object]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,object]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
