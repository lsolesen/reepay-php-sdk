<?php
/**
 * SubscriptionApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * SubscriptionApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SubscriptionApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation cancelChangePlan
     *
     * Cancel pending plan change
     *
     * @param string $handle Subscription handle (required)
     * @return \Swagger\Client\Model\Subscription
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelChangePlan($handle)
    {
        list($response) = $this->cancelChangePlanWithHttpInfo($handle);
        return $response;
    }

    /**
     * Operation cancelChangePlanWithHttpInfo
     *
     * Cancel pending plan change
     *
     * @param string $handle Subscription handle (required)
     * @return Array of \Swagger\Client\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelChangePlanWithHttpInfo($handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling cancelChangePlan');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/cancel_change_plan";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Subscription',
                '/v1/subscription/{handle}/cancel_change_plan'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Subscription', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Subscription', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cancelSubscription
     *
     * Cancel subscription
     *
     * @param string $handle Subscription handle (required)
     * @return \Swagger\Client\Model\Subscription
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelSubscription($handle)
    {
        list($response) = $this->cancelSubscriptionWithHttpInfo($handle);
        return $response;
    }

    /**
     * Operation cancelSubscriptionWithHttpInfo
     *
     * Cancel subscription
     *
     * @param string $handle Subscription handle (required)
     * @return Array of \Swagger\Client\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function cancelSubscriptionWithHttpInfo($handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling cancelSubscription');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/cancel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Subscription',
                '/v1/subscription/{handle}/cancel'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Subscription', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Subscription', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation changeNextPeriodStartJson
     *
     * Change next renewal date
     *
     * @param string $handle Subscription handle (required)
     * @param \Swagger\Client\Model\ChangeNextPeriodStart $body  (optional)
     * @return \Swagger\Client\Model\Subscription
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function changeNextPeriodStartJson($handle, $body = null)
    {
        list($response) = $this->changeNextPeriodStartJsonWithHttpInfo($handle, $body);
        return $response;
    }

    /**
     * Operation changeNextPeriodStartJsonWithHttpInfo
     *
     * Change next renewal date
     *
     * @param string $handle Subscription handle (required)
     * @param \Swagger\Client\Model\ChangeNextPeriodStart $body  (optional)
     * @return Array of \Swagger\Client\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function changeNextPeriodStartJsonWithHttpInfo($handle, $body = null)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling changeNextPeriodStartJson');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/change_next_period_start";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Subscription',
                '/v1/subscription/{handle}/change_next_period_start'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Subscription', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Subscription', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation changePlanJson
     *
     * Change plan
     *
     * @param string $handle Subscription handle (required)
     * @param \Swagger\Client\Model\ChangePlan $body  (optional)
     * @return \Swagger\Client\Model\Subscription
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function changePlanJson($handle, $body = null)
    {
        list($response) = $this->changePlanJsonWithHttpInfo($handle, $body);
        return $response;
    }

    /**
     * Operation changePlanJsonWithHttpInfo
     *
     * Change plan
     *
     * @param string $handle Subscription handle (required)
     * @param \Swagger\Client\Model\ChangePlan $body  (optional)
     * @return Array of \Swagger\Client\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function changePlanJsonWithHttpInfo($handle, $body = null)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling changePlanJson');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/change_plan";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Subscription',
                '/v1/subscription/{handle}/change_plan'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Subscription', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Subscription', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createSubscriptionDiscount
     *
     * Add subscription discount
     *
     * @param string $handle Subscription handle (required)
     * @param \Swagger\Client\Model\CreateSubscriptionDiscount $body  (optional)
     * @return \Swagger\Client\Model\SubscriptionDiscount
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createSubscriptionDiscount($handle, $body = null)
    {
        list($response) = $this->createSubscriptionDiscountWithHttpInfo($handle, $body);
        return $response;
    }

    /**
     * Operation createSubscriptionDiscountWithHttpInfo
     *
     * Add subscription discount
     *
     * @param string $handle Subscription handle (required)
     * @param \Swagger\Client\Model\CreateSubscriptionDiscount $body  (optional)
     * @return Array of \Swagger\Client\Model\SubscriptionDiscount, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createSubscriptionDiscountWithHttpInfo($handle, $body = null)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling createSubscriptionDiscount');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/discount";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SubscriptionDiscount',
                '/v1/subscription/{handle}/discount'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SubscriptionDiscount', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SubscriptionDiscount', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createSubscriptionInvoice
     *
     * Create invoice ondemand for subscription
     *
     * @param string $handle Subscription handle (required)
     * @param \Swagger\Client\Model\CreateSubscriptionInvoice $body  (optional)
     * @return \Swagger\Client\Model\Invoice
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createSubscriptionInvoice($handle, $body = null)
    {
        list($response) = $this->createSubscriptionInvoiceWithHttpInfo($handle, $body);
        return $response;
    }

    /**
     * Operation createSubscriptionInvoiceWithHttpInfo
     *
     * Create invoice ondemand for subscription
     *
     * @param string $handle Subscription handle (required)
     * @param \Swagger\Client\Model\CreateSubscriptionInvoice $body  (optional)
     * @return Array of \Swagger\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createSubscriptionInvoiceWithHttpInfo($handle, $body = null)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling createSubscriptionInvoice');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/invoice";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Invoice',
                '/v1/subscription/{handle}/invoice'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Invoice', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Invoice', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createSubscriptionJson
     *
     * Create subscription
     *
     * @param \Swagger\Client\Model\CreateSubscription $body  (optional)
     * @return \Swagger\Client\Model\Subscription
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createSubscriptionJson($body = null)
    {
        list($response) = $this->createSubscriptionJsonWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createSubscriptionJsonWithHttpInfo
     *
     * Create subscription
     *
     * @param \Swagger\Client\Model\CreateSubscription $body  (optional)
     * @return Array of \Swagger\Client\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createSubscriptionJsonWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/v1/subscription";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Subscription',
                '/v1/subscription'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Subscription', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Subscription', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSubscriptionDiscount
     *
     * Delete subscription discount
     *
     * @param string $handle Subscription handle (required)
     * @param string $sd_handle Subscription discount handle (required)
     * @return \Swagger\Client\Model\SubscriptionDiscount
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteSubscriptionDiscount($handle, $sd_handle)
    {
        list($response) = $this->deleteSubscriptionDiscountWithHttpInfo($handle, $sd_handle);
        return $response;
    }

    /**
     * Operation deleteSubscriptionDiscountWithHttpInfo
     *
     * Delete subscription discount
     *
     * @param string $handle Subscription handle (required)
     * @param string $sd_handle Subscription discount handle (required)
     * @return Array of \Swagger\Client\Model\SubscriptionDiscount, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteSubscriptionDiscountWithHttpInfo($handle, $sd_handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling deleteSubscriptionDiscount');
        }
        // verify the required parameter 'sd_handle' is set
        if ($sd_handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sd_handle when calling deleteSubscriptionDiscount');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/discount/{sdHandle}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // path params
        if ($sd_handle !== null) {
            $resourcePath = str_replace(
                "{" . "sdHandle" . "}",
                $this->apiClient->getSerializer()->toPathValue($sd_handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SubscriptionDiscount',
                '/v1/subscription/{handle}/discount/{sdHandle}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SubscriptionDiscount', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SubscriptionDiscount', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation expire
     *
     * Expire subscription
     *
     * @param string $handle Subscription handle (required)
     * @return \Swagger\Client\Model\Subscription
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function expire($handle)
    {
        list($response) = $this->expireWithHttpInfo($handle);
        return $response;
    }

    /**
     * Operation expireWithHttpInfo
     *
     * Expire subscription
     *
     * @param string $handle Subscription handle (required)
     * @return Array of \Swagger\Client\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function expireWithHttpInfo($handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling expire');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/expire";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Subscription',
                '/v1/subscription/{handle}/expire'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Subscription', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Subscription', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSubscription
     *
     * Get subscription
     *
     * @param string $handle Subscription handle (required)
     * @return \Swagger\Client\Model\Subscription
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSubscription($handle)
    {
        list($response) = $this->getSubscriptionWithHttpInfo($handle);
        return $response;
    }

    /**
     * Operation getSubscriptionWithHttpInfo
     *
     * Get subscription
     *
     * @param string $handle Subscription handle (required)
     * @return Array of \Swagger\Client\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSubscriptionWithHttpInfo($handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling getSubscription');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Subscription',
                '/v1/subscription/{handle}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Subscription', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Subscription', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSubscriptionDiscount
     *
     * Get subscription discount
     *
     * @param string $handle Subscription handle (required)
     * @param string $sd_handle Subscription discount handle (required)
     * @return \Swagger\Client\Model\SubscriptionDiscount
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSubscriptionDiscount($handle, $sd_handle)
    {
        list($response) = $this->getSubscriptionDiscountWithHttpInfo($handle, $sd_handle);
        return $response;
    }

    /**
     * Operation getSubscriptionDiscountWithHttpInfo
     *
     * Get subscription discount
     *
     * @param string $handle Subscription handle (required)
     * @param string $sd_handle Subscription discount handle (required)
     * @return Array of \Swagger\Client\Model\SubscriptionDiscount, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSubscriptionDiscountWithHttpInfo($handle, $sd_handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling getSubscriptionDiscount');
        }
        // verify the required parameter 'sd_handle' is set
        if ($sd_handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sd_handle when calling getSubscriptionDiscount');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/discount/{sdHandle}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // path params
        if ($sd_handle !== null) {
            $resourcePath = str_replace(
                "{" . "sdHandle" . "}",
                $this->apiClient->getSerializer()->toPathValue($sd_handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SubscriptionDiscount',
                '/v1/subscription/{handle}/discount/{sdHandle}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SubscriptionDiscount', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SubscriptionDiscount', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSubscriptionDiscounts
     *
     * Get subscription discounts
     *
     * @param string $handle Subscription handle (required)
     * @return \Swagger\Client\Model\SubscriptionDiscount[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSubscriptionDiscounts($handle)
    {
        list($response) = $this->getSubscriptionDiscountsWithHttpInfo($handle);
        return $response;
    }

    /**
     * Operation getSubscriptionDiscountsWithHttpInfo
     *
     * Get subscription discounts
     *
     * @param string $handle Subscription handle (required)
     * @return Array of \Swagger\Client\Model\SubscriptionDiscount[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSubscriptionDiscountsWithHttpInfo($handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling getSubscriptionDiscounts');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/discount";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SubscriptionDiscount[]',
                '/v1/subscription/{handle}/discount'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SubscriptionDiscount[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SubscriptionDiscount[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSubscriptionPaymentMethods
     *
     * Get payment methods
     *
     * @param string $handle Subscription handle (required)
     * @return \Swagger\Client\Model\PaymentMethods
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSubscriptionPaymentMethods($handle)
    {
        list($response) = $this->getSubscriptionPaymentMethodsWithHttpInfo($handle);
        return $response;
    }

    /**
     * Operation getSubscriptionPaymentMethodsWithHttpInfo
     *
     * Get payment methods
     *
     * @param string $handle Subscription handle (required)
     * @return Array of \Swagger\Client\Model\PaymentMethods, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSubscriptionPaymentMethodsWithHttpInfo($handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling getSubscriptionPaymentMethods');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/payment_method";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PaymentMethods',
                '/v1/subscription/{handle}/payment_method'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PaymentMethods', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PaymentMethods', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSubscriptions
     *
     * Get list of subscriptions
     *
     * @param int $page Page number to get (optional, default to 1)
     * @param int $size Page size to use (optional, default to 20)
     * @param string $search Optional search expression (optional)
     * @param string $sort Optional sorting expression (optional)
     * @return \Swagger\Client\Model\SubscriptionSearch
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSubscriptions($page = null, $size = null, $search = null, $sort = null)
    {
        list($response) = $this->getSubscriptionsWithHttpInfo($page, $size, $search, $sort);
        return $response;
    }

    /**
     * Operation getSubscriptionsWithHttpInfo
     *
     * Get list of subscriptions
     *
     * @param int $page Page number to get (optional, default to 1)
     * @param int $size Page size to use (optional, default to 20)
     * @param string $search Optional search expression (optional)
     * @param string $sort Optional sorting expression (optional)
     * @return Array of \Swagger\Client\Model\SubscriptionSearch, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSubscriptionsWithHttpInfo($page = null, $size = null, $search = null, $sort = null)
    {
        if (!is_null($page) && ($page < 1.0)) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling SubscriptionApi.getSubscriptions, must be bigger than or equal to 1.0.');
        }

        if (!is_null($size) && ($size > 100.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling SubscriptionApi.getSubscriptions, must be smaller than or equal to 100.0.');
        }
        if (!is_null($size) && ($size < 1.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling SubscriptionApi.getSubscriptions, must be bigger than or equal to 1.0.');
        }

        // parse inputs
        $resourcePath = "/v1/subscription";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SubscriptionSearch',
                '/v1/subscription'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SubscriptionSearch', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SubscriptionSearch', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation intervalAmount
     *
     * Calculate interval amount
     *
     * @param string $handle Subscription handle (required)
     * @param string $from From date on the form yyyy-MM-dd (required)
     * @param string $to To date on the form yyyy-MM-dd (required)
     * @return \Swagger\Client\Model\IntervalAmount
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function intervalAmount($handle, $from, $to)
    {
        list($response) = $this->intervalAmountWithHttpInfo($handle, $from, $to);
        return $response;
    }

    /**
     * Operation intervalAmountWithHttpInfo
     *
     * Calculate interval amount
     *
     * @param string $handle Subscription handle (required)
     * @param string $from From date on the form yyyy-MM-dd (required)
     * @param string $to To date on the form yyyy-MM-dd (required)
     * @return Array of \Swagger\Client\Model\IntervalAmount, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function intervalAmountWithHttpInfo($handle, $from, $to)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling intervalAmount');
        }
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException('Missing the required parameter $from when calling intervalAmount');
        }
        // verify the required parameter 'to' is set
        if ($to === null) {
            throw new \InvalidArgumentException('Missing the required parameter $to when calling intervalAmount');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/interval_amount";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = $this->apiClient->getSerializer()->toQueryValue($to);
        }
        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\IntervalAmount',
                '/v1/subscription/{handle}/interval_amount'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\IntervalAmount', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\IntervalAmount', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeAllPaymentMethods
     *
     * Remove all payment methods
     *
     * @param string $handle Subscription handle (required)
     * @return \Swagger\Client\Model\PaymentMethods
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function removeAllPaymentMethods($handle)
    {
        list($response) = $this->removeAllPaymentMethodsWithHttpInfo($handle);
        return $response;
    }

    /**
     * Operation removeAllPaymentMethodsWithHttpInfo
     *
     * Remove all payment methods
     *
     * @param string $handle Subscription handle (required)
     * @return Array of \Swagger\Client\Model\PaymentMethods, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function removeAllPaymentMethodsWithHttpInfo($handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling removeAllPaymentMethods');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/payment_method";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PaymentMethods',
                '/v1/subscription/{handle}/payment_method'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PaymentMethods', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PaymentMethods', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removePaymentMethod
     *
     * Remove payment method
     *
     * @param string $handle Subscription handle (required)
     * @param string $method_id Payment method id (required)
     * @return \Swagger\Client\Model\PaymentMethods
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function removePaymentMethod($handle, $method_id)
    {
        list($response) = $this->removePaymentMethodWithHttpInfo($handle, $method_id);
        return $response;
    }

    /**
     * Operation removePaymentMethodWithHttpInfo
     *
     * Remove payment method
     *
     * @param string $handle Subscription handle (required)
     * @param string $method_id Payment method id (required)
     * @return Array of \Swagger\Client\Model\PaymentMethods, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function removePaymentMethodWithHttpInfo($handle, $method_id)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling removePaymentMethod');
        }
        // verify the required parameter 'method_id' is set
        if ($method_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $method_id when calling removePaymentMethod');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/payment_method/{method_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // path params
        if ($method_id !== null) {
            $resourcePath = str_replace(
                "{" . "method_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($method_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PaymentMethods',
                '/v1/subscription/{handle}/payment_method/{method_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PaymentMethods', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PaymentMethods', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setCardPaymentMethodJson
     *
     * Set card payment method
     *
     * @param string $handle Subscription handle (required)
     * @param \Swagger\Client\Model\SetCardPaymentMethod $body  (optional)
     * @return \Swagger\Client\Model\PaymentMethods
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function setCardPaymentMethodJson($handle, $body = null)
    {
        list($response) = $this->setCardPaymentMethodJsonWithHttpInfo($handle, $body);
        return $response;
    }

    /**
     * Operation setCardPaymentMethodJsonWithHttpInfo
     *
     * Set card payment method
     *
     * @param string $handle Subscription handle (required)
     * @param \Swagger\Client\Model\SetCardPaymentMethod $body  (optional)
     * @return Array of \Swagger\Client\Model\PaymentMethods, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function setCardPaymentMethodJsonWithHttpInfo($handle, $body = null)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling setCardPaymentMethodJson');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/payment_method/card";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PaymentMethods',
                '/v1/subscription/{handle}/payment_method/card'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PaymentMethods', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PaymentMethods', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation uncancel
     *
     * Uncancel subscription
     *
     * @param string $handle Subscription handle (required)
     * @return \Swagger\Client\Model\Subscription
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function uncancel($handle)
    {
        list($response) = $this->uncancelWithHttpInfo($handle);
        return $response;
    }

    /**
     * Operation uncancelWithHttpInfo
     *
     * Uncancel subscription
     *
     * @param string $handle Subscription handle (required)
     * @return Array of \Swagger\Client\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function uncancelWithHttpInfo($handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling uncancel');
        }
        // parse inputs
        $resourcePath = "/v1/subscription/{handle}/uncancel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Subscription',
                '/v1/subscription/{handle}/uncancel'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Subscription', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Subscription', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
