<?php
/**
 * CustomerApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * CustomerApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CustomerApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation activatePaymentMethod
     *
     * Activate payment method
     *
     * @param string $handle Customer handle (required)
     * @param string $method_id Payment method id (required)
     * @return \Swagger\Client\Model\PaymentMethods
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function activatePaymentMethod($handle, $method_id)
    {
        list($response) = $this->activatePaymentMethodWithHttpInfo($handle, $method_id);
        return $response;
    }

    /**
     * Operation activatePaymentMethodWithHttpInfo
     *
     * Activate payment method
     *
     * @param string $handle Customer handle (required)
     * @param string $method_id Payment method id (required)
     * @return Array of \Swagger\Client\Model\PaymentMethods, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function activatePaymentMethodWithHttpInfo($handle, $method_id)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling activatePaymentMethod');
        }
        // verify the required parameter 'method_id' is set
        if ($method_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $method_id when calling activatePaymentMethod');
        }
        // parse inputs
        $resourcePath = "/v1/customer/{handle}/payment_method/{method_id}/activate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // path params
        if ($method_id !== null) {
            $resourcePath = str_replace(
                "{" . "method_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($method_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PaymentMethods',
                '/v1/customer/{handle}/payment_method/{method_id}/activate'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PaymentMethods', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PaymentMethods', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addCardJson
     *
     * Add card payment method
     *
     * @param string $handle Customer handle (required)
     * @param \Swagger\Client\Model\CardToken $body  (optional)
     * @return \Swagger\Client\Model\Card
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addCardJson($handle, $body = null)
    {
        list($response) = $this->addCardJsonWithHttpInfo($handle, $body);
        return $response;
    }

    /**
     * Operation addCardJsonWithHttpInfo
     *
     * Add card payment method
     *
     * @param string $handle Customer handle (required)
     * @param \Swagger\Client\Model\CardToken $body  (optional)
     * @return Array of \Swagger\Client\Model\Card, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addCardJsonWithHttpInfo($handle, $body = null)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling addCardJson');
        }
        // parse inputs
        $resourcePath = "/v1/customer/{handle}/payment_method/card";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Card',
                '/v1/customer/{handle}/payment_method/card'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Card', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Card', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCustomerInvoice
     *
     * Create invoice ondemand for customer
     *
     * @param string $handle Customer handle (required)
     * @param \Swagger\Client\Model\CreateCustomerInvoice $body  (optional)
     * @return \Swagger\Client\Model\Invoice
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createCustomerInvoice($handle, $body = null)
    {
        list($response) = $this->createCustomerInvoiceWithHttpInfo($handle, $body);
        return $response;
    }

    /**
     * Operation createCustomerInvoiceWithHttpInfo
     *
     * Create invoice ondemand for customer
     *
     * @param string $handle Customer handle (required)
     * @param \Swagger\Client\Model\CreateCustomerInvoice $body  (optional)
     * @return Array of \Swagger\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createCustomerInvoiceWithHttpInfo($handle, $body = null)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling createCustomerInvoice');
        }
        // parse inputs
        $resourcePath = "/v1/customer/{handle}/invoice";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Invoice',
                '/v1/customer/{handle}/invoice'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Invoice', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Invoice', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCustomerJson
     *
     * Create customer
     *
     * @param \Swagger\Client\Model\CreateCustomer $body  (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createCustomerJson($body = null)
    {
        list($response) = $this->createCustomerJsonWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createCustomerJsonWithHttpInfo
     *
     * Create customer
     *
     * @param \Swagger\Client\Model\CreateCustomer $body  (optional)
     * @return Array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createCustomerJsonWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/v1/customer";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/v1/customer'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCustomerNoteJson
     *
     * Create customer note
     *
     * @param string $handle  (required)
     * @param \Swagger\Client\Model\CreateCustomerNote $body  (optional)
     * @return \Swagger\Client\Model\CustomerNote
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createCustomerNoteJson($handle, $body = null)
    {
        list($response) = $this->createCustomerNoteJsonWithHttpInfo($handle, $body);
        return $response;
    }

    /**
     * Operation createCustomerNoteJsonWithHttpInfo
     *
     * Create customer note
     *
     * @param string $handle  (required)
     * @param \Swagger\Client\Model\CreateCustomerNote $body  (optional)
     * @return Array of \Swagger\Client\Model\CustomerNote, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createCustomerNoteJsonWithHttpInfo($handle, $body = null)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling createCustomerNoteJson');
        }
        // parse inputs
        $resourcePath = "/v1/customer/{handle}/note";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerNote',
                '/v1/customer/{handle}/note'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerNote', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerNote', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCustomer
     *
     * Delete customer
     *
     * @param string $handle Customer handle (required)
     * @return \Swagger\Client\Model\Customer
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteCustomer($handle)
    {
        list($response) = $this->deleteCustomerWithHttpInfo($handle);
        return $response;
    }

    /**
     * Operation deleteCustomerWithHttpInfo
     *
     * Delete customer
     *
     * @param string $handle Customer handle (required)
     * @return Array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteCustomerWithHttpInfo($handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling deleteCustomer');
        }
        // parse inputs
        $resourcePath = "/v1/customer/{handle}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/v1/customer/{handle}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCard
     *
     * Get card
     *
     * @param string $handle Customer handle (required)
     * @param string $id Card id (required)
     * @return \Swagger\Client\Model\Card
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCard($handle, $id)
    {
        list($response) = $this->getCardWithHttpInfo($handle, $id);
        return $response;
    }

    /**
     * Operation getCardWithHttpInfo
     *
     * Get card
     *
     * @param string $handle Customer handle (required)
     * @param string $id Card id (required)
     * @return Array of \Swagger\Client\Model\Card, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCardWithHttpInfo($handle, $id)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling getCard');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getCard');
        }
        // parse inputs
        $resourcePath = "/v1/customer/{handle}/payment_method/card/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Card',
                '/v1/customer/{handle}/payment_method/card/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Card', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Card', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCardDetails
     *
     * Get gateway card details
     *
     * @param string $handle Customer handle (required)
     * @param string $id Card id (required)
     * @return map[string,object]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCardDetails($handle, $id)
    {
        list($response) = $this->getCardDetailsWithHttpInfo($handle, $id);
        return $response;
    }

    /**
     * Operation getCardDetailsWithHttpInfo
     *
     * Get gateway card details
     *
     * @param string $handle Customer handle (required)
     * @param string $id Card id (required)
     * @return Array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCardDetailsWithHttpInfo($handle, $id)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling getCardDetails');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getCardDetails');
        }
        // parse inputs
        $resourcePath = "/v1/customer/{handle}/payment_method/card/{id}/details";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'map[string,object]',
                '/v1/customer/{handle}/payment_method/card/{id}/details'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'map[string,object]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,object]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCustomer
     *
     * Get customer
     *
     * @param string $handle Customer handle (required)
     * @return \Swagger\Client\Model\Customer
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCustomer($handle)
    {
        list($response) = $this->getCustomerWithHttpInfo($handle);
        return $response;
    }

    /**
     * Operation getCustomerWithHttpInfo
     *
     * Get customer
     *
     * @param string $handle Customer handle (required)
     * @return Array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCustomerWithHttpInfo($handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling getCustomer');
        }
        // parse inputs
        $resourcePath = "/v1/customer/{handle}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/v1/customer/{handle}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCustomerNotes
     *
     * Get customer notes
     *
     * @param string $handle Customer handle (required)
     * @return \Swagger\Client\Model\CustomerNote[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCustomerNotes($handle)
    {
        list($response) = $this->getCustomerNotesWithHttpInfo($handle);
        return $response;
    }

    /**
     * Operation getCustomerNotesWithHttpInfo
     *
     * Get customer notes
     *
     * @param string $handle Customer handle (required)
     * @return Array of \Swagger\Client\Model\CustomerNote[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCustomerNotesWithHttpInfo($handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling getCustomerNotes');
        }
        // parse inputs
        $resourcePath = "/v1/customer/{handle}/note";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerNote[]',
                '/v1/customer/{handle}/note'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerNote[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerNote[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCustomerPaymentMethods
     *
     * Get payment methods
     *
     * @param string $handle Customer handle (required)
     * @return \Swagger\Client\Model\PaymentMethods
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCustomerPaymentMethods($handle)
    {
        list($response) = $this->getCustomerPaymentMethodsWithHttpInfo($handle);
        return $response;
    }

    /**
     * Operation getCustomerPaymentMethodsWithHttpInfo
     *
     * Get payment methods
     *
     * @param string $handle Customer handle (required)
     * @return Array of \Swagger\Client\Model\PaymentMethods, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCustomerPaymentMethodsWithHttpInfo($handle)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling getCustomerPaymentMethods');
        }
        // parse inputs
        $resourcePath = "/v1/customer/{handle}/payment_method";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PaymentMethods',
                '/v1/customer/{handle}/payment_method'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PaymentMethods', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PaymentMethods', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCustomers
     *
     * Get list of customers
     *
     * @param int $page Page number to get (optional, default to 1)
     * @param int $size Page size to use (optional, default to 20)
     * @param string $search Optional search expression (optional)
     * @param string $sort Optional sorting expression (optional)
     * @return \Swagger\Client\Model\CustomerSearch
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCustomers($page = null, $size = null, $search = null, $sort = null)
    {
        list($response) = $this->getCustomersWithHttpInfo($page, $size, $search, $sort);
        return $response;
    }

    /**
     * Operation getCustomersWithHttpInfo
     *
     * Get list of customers
     *
     * @param int $page Page number to get (optional, default to 1)
     * @param int $size Page size to use (optional, default to 20)
     * @param string $search Optional search expression (optional)
     * @param string $sort Optional sorting expression (optional)
     * @return Array of \Swagger\Client\Model\CustomerSearch, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCustomersWithHttpInfo($page = null, $size = null, $search = null, $sort = null)
    {
        if (!is_null($page) && ($page < 1.0)) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CustomerApi.getCustomers, must be bigger than or equal to 1.0.');
        }

        if (!is_null($size) && ($size > 100.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CustomerApi.getCustomers, must be smaller than or equal to 100.0.');
        }
        if (!is_null($size) && ($size < 1.0)) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling CustomerApi.getCustomers, must be bigger than or equal to 1.0.');
        }

        // parse inputs
        $resourcePath = "/v1/customer";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerSearch',
                '/v1/customer'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerSearch', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerSearch', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importCardJson
     *
     * Import card payment method
     *
     * @param string $handle Customer handle (required)
     * @param \Swagger\Client\Model\CardImport $body  (optional)
     * @return \Swagger\Client\Model\Card
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function importCardJson($handle, $body = null)
    {
        list($response) = $this->importCardJsonWithHttpInfo($handle, $body);
        return $response;
    }

    /**
     * Operation importCardJsonWithHttpInfo
     *
     * Import card payment method
     *
     * @param string $handle Customer handle (required)
     * @param \Swagger\Client\Model\CardImport $body  (optional)
     * @return Array of \Swagger\Client\Model\Card, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function importCardJsonWithHttpInfo($handle, $body = null)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling importCardJson');
        }
        // parse inputs
        $resourcePath = "/v1/customer/{handle}/payment_method/card_import";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Card',
                '/v1/customer/{handle}/payment_method/card_import'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Card', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Card', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation inactivatePaymentMethod
     *
     * Inactivate payment method
     *
     * @param string $handle Customer handle (required)
     * @param string $method_id Payment method id (required)
     * @return \Swagger\Client\Model\PaymentMethods
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function inactivatePaymentMethod($handle, $method_id)
    {
        list($response) = $this->inactivatePaymentMethodWithHttpInfo($handle, $method_id);
        return $response;
    }

    /**
     * Operation inactivatePaymentMethodWithHttpInfo
     *
     * Inactivate payment method
     *
     * @param string $handle Customer handle (required)
     * @param string $method_id Payment method id (required)
     * @return Array of \Swagger\Client\Model\PaymentMethods, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function inactivatePaymentMethodWithHttpInfo($handle, $method_id)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling inactivatePaymentMethod');
        }
        // verify the required parameter 'method_id' is set
        if ($method_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $method_id when calling inactivatePaymentMethod');
        }
        // parse inputs
        $resourcePath = "/v1/customer/{handle}/payment_method/{method_id}/inactivate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // path params
        if ($method_id !== null) {
            $resourcePath = str_replace(
                "{" . "method_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($method_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PaymentMethods',
                '/v1/customer/{handle}/payment_method/{method_id}/inactivate'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PaymentMethods', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PaymentMethods', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateCustomerJson
     *
     * Update customer
     *
     * @param string $handle Customer handle (required)
     * @param \Swagger\Client\Model\UpdateCustomer $body  (optional)
     * @return \Swagger\Client\Model\Customer
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateCustomerJson($handle, $body = null)
    {
        list($response) = $this->updateCustomerJsonWithHttpInfo($handle, $body);
        return $response;
    }

    /**
     * Operation updateCustomerJsonWithHttpInfo
     *
     * Update customer
     *
     * @param string $handle Customer handle (required)
     * @param \Swagger\Client\Model\UpdateCustomer $body  (optional)
     * @return Array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateCustomerJsonWithHttpInfo($handle, $body = null)
    {
        // verify the required parameter 'handle' is set
        if ($handle === null) {
            throw new \InvalidArgumentException('Missing the required parameter $handle when calling updateCustomerJson');
        }
        // parse inputs
        $resourcePath = "/v1/customer/{handle}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($handle !== null) {
            $resourcePath = str_replace(
                "{" . "handle" . "}",
                $this->apiClient->getSerializer()->toPathValue($handle),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/v1/customer/{handle}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
