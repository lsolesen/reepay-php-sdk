<?php
/**
 * MailTemplateApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * MailTemplateApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MailTemplateApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return MailTemplateApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getAll
     *
     * Get all templates
     *
     * @return \Swagger\Client\Model\MailTemplate[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAll()
    {
        list($response) = $this->getAllWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllWithHttpInfo
     *
     * Get all templates
     *
     * @return Array of \Swagger\Client\Model\MailTemplate[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1/mail_template";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\MailTemplate[]',
                '/v1/mail_template'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\MailTemplate[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MailTemplate[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllCustom
     *
     * 
     *
     * @return \Swagger\Client\Model\MailTemplate[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllCustom()
    {
        list($response) = $this->getAllCustomWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllCustomWithHttpInfo
     *
     * 
     *
     * @return Array of \Swagger\Client\Model\MailTemplate[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllCustomWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1/mail_template/all_custom";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\MailTemplate[]',
                '/v1/mail_template/all_custom'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\MailTemplate[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MailTemplate[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMailTemplate
     *
     * Get template
     *
     * @param string $mail_type Mail type (required)
     * @return \Swagger\Client\Model\MailTemplate
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMailTemplate($mail_type)
    {
        list($response) = $this->getMailTemplateWithHttpInfo($mail_type);
        return $response;
    }

    /**
     * Operation getMailTemplateWithHttpInfo
     *
     * Get template
     *
     * @param string $mail_type Mail type (required)
     * @return Array of \Swagger\Client\Model\MailTemplate, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMailTemplateWithHttpInfo($mail_type)
    {
        // verify the required parameter 'mail_type' is set
        if ($mail_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mail_type when calling getMailTemplate');
        }
        // parse inputs
        $resourcePath = "/v1/mail_template/{mail_type}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($mail_type !== null) {
            $resourcePath = str_replace(
                "{" . "mail_type" . "}",
                $this->apiClient->getSerializer()->toPathValue($mail_type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\MailTemplate',
                '/v1/mail_template/{mail_type}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\MailTemplate', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MailTemplate', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSample
     *
     * Get sample data
     *
     * @return map[string,object]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSample()
    {
        list($response) = $this->getSampleWithHttpInfo();
        return $response;
    }

    /**
     * Operation getSampleWithHttpInfo
     *
     * Get sample data
     *
     * @return Array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getSampleWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1/mail_template/sample";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'map[string,object]',
                '/v1/mail_template/sample'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'map[string,object]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,object]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation preview
     *
     * Preview template
     *
     * @param string $mail_type Mail type (required)
     * @param \Swagger\Client\Model\PreviewMailTemplate $body  (optional)
     * @return \Swagger\Client\Model\MailTemplatePreviewContent
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function preview($mail_type, $body = null)
    {
        list($response) = $this->previewWithHttpInfo($mail_type, $body);
        return $response;
    }

    /**
     * Operation previewWithHttpInfo
     *
     * Preview template
     *
     * @param string $mail_type Mail type (required)
     * @param \Swagger\Client\Model\PreviewMailTemplate $body  (optional)
     * @return Array of \Swagger\Client\Model\MailTemplatePreviewContent, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function previewWithHttpInfo($mail_type, $body = null)
    {
        // verify the required parameter 'mail_type' is set
        if ($mail_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mail_type when calling preview');
        }
        // parse inputs
        $resourcePath = "/v1/mail_template/{mail_type}/preview";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($mail_type !== null) {
            $resourcePath = str_replace(
                "{" . "mail_type" . "}",
                $this->apiClient->getSerializer()->toPathValue($mail_type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\MailTemplatePreviewContent',
                '/v1/mail_template/{mail_type}/preview'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\MailTemplatePreviewContent', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MailTemplatePreviewContent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reset
     *
     * Reset template
     *
     * @param string $mail_type Mail type (required)
     * @return \Swagger\Client\Model\MailTemplate
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function reset($mail_type)
    {
        list($response) = $this->resetWithHttpInfo($mail_type);
        return $response;
    }

    /**
     * Operation resetWithHttpInfo
     *
     * Reset template
     *
     * @param string $mail_type Mail type (required)
     * @return Array of \Swagger\Client\Model\MailTemplate, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resetWithHttpInfo($mail_type)
    {
        // verify the required parameter 'mail_type' is set
        if ($mail_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mail_type when calling reset');
        }
        // parse inputs
        $resourcePath = "/v1/mail_template/{mail_type}/reset";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($mail_type !== null) {
            $resourcePath = str_replace(
                "{" . "mail_type" . "}",
                $this->apiClient->getSerializer()->toPathValue($mail_type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\MailTemplate',
                '/v1/mail_template/{mail_type}/reset'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\MailTemplate', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MailTemplate', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation save
     *
     * Update template
     *
     * @param string $mail_type Mail type (required)
     * @param \Swagger\Client\Model\UpdateMailTemplate $body  (optional)
     * @return \Swagger\Client\Model\MailTemplate
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function save($mail_type, $body = null)
    {
        list($response) = $this->saveWithHttpInfo($mail_type, $body);
        return $response;
    }

    /**
     * Operation saveWithHttpInfo
     *
     * Update template
     *
     * @param string $mail_type Mail type (required)
     * @param \Swagger\Client\Model\UpdateMailTemplate $body  (optional)
     * @return Array of \Swagger\Client\Model\MailTemplate, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function saveWithHttpInfo($mail_type, $body = null)
    {
        // verify the required parameter 'mail_type' is set
        if ($mail_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mail_type when calling save');
        }
        // parse inputs
        $resourcePath = "/v1/mail_template/{mail_type}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($mail_type !== null) {
            $resourcePath = str_replace(
                "{" . "mail_type" . "}",
                $this->apiClient->getSerializer()->toPathValue($mail_type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\MailTemplate',
                '/v1/mail_template/{mail_type}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\MailTemplate', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MailTemplate', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation verifyMailTemplate
     *
     * Verify template
     *
     * @param \Swagger\Client\Model\MailTemplateVerifyRequest $body  (optional)
     * @return \Swagger\Client\Model\MailTemplateVerifyContent
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function verifyMailTemplate($body = null)
    {
        list($response) = $this->verifyMailTemplateWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation verifyMailTemplateWithHttpInfo
     *
     * Verify template
     *
     * @param \Swagger\Client\Model\MailTemplateVerifyRequest $body  (optional)
     * @return Array of \Swagger\Client\Model\MailTemplateVerifyContent, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function verifyMailTemplateWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/v1/mail_template/verify";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\MailTemplateVerifyContent',
                '/v1/mail_template/verify'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\MailTemplateVerifyContent', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MailTemplateVerifyContent', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
