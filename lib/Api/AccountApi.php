<?php
/**
 * AccountApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * AccountApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AccountApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createPrivateKey
     *
     * Create private key
     *
     * @return \Swagger\Client\Model\Key
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createPrivateKey()
    {
        list($response) = $this->createPrivateKeyWithHttpInfo();
        return $response;
    }

    /**
     * Operation createPrivateKeyWithHttpInfo
     *
     * Create private key
     *
     * @return Array of \Swagger\Client\Model\Key, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createPrivateKeyWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1/account/privkey";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Key',
                '/v1/account/privkey'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Key', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Key', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createPublicKey
     *
     * Create public key
     *
     * @return \Swagger\Client\Model\Key
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createPublicKey()
    {
        list($response) = $this->createPublicKeyWithHttpInfo();
        return $response;
    }

    /**
     * Operation createPublicKeyWithHttpInfo
     *
     * Create public key
     *
     * @return Array of \Swagger\Client\Model\Key, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createPublicKeyWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1/account/pubkey";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Key',
                '/v1/account/pubkey'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Key', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Key', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation expirePrivateKey
     *
     * Expire private key
     *
     * @param string $key Private key (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function expirePrivateKey($key)
    {
        list($response) = $this->expirePrivateKeyWithHttpInfo($key);
        return $response;
    }

    /**
     * Operation expirePrivateKeyWithHttpInfo
     *
     * Expire private key
     *
     * @param string $key Private key (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function expirePrivateKeyWithHttpInfo($key)
    {
        // verify the required parameter 'key' is set
        if ($key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key when calling expirePrivateKey');
        }
        // parse inputs
        $resourcePath = "/v1/account/privkey/{key}/expire";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                "{" . "key" . "}",
                $this->apiClient->getSerializer()->toPathValue($key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/account/privkey/{key}/expire'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation expirePublicKey
     *
     * Expire public key
     *
     * @param string $key Public key (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function expirePublicKey($key)
    {
        list($response) = $this->expirePublicKeyWithHttpInfo($key);
        return $response;
    }

    /**
     * Operation expirePublicKeyWithHttpInfo
     *
     * Expire public key
     *
     * @param string $key Public key (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function expirePublicKeyWithHttpInfo($key)
    {
        // verify the required parameter 'key' is set
        if ($key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key when calling expirePublicKey');
        }
        // parse inputs
        $resourcePath = "/v1/account/pubkey/{key}/expire";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                "{" . "key" . "}",
                $this->apiClient->getSerializer()->toPathValue($key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/account/pubkey/{key}/expire'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation generateWebhookSecret
     *
     * Generate new webhook secret
     *
     * @return \Swagger\Client\Model\WebhookSettings
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function generateWebhookSecret()
    {
        list($response) = $this->generateWebhookSecretWithHttpInfo();
        return $response;
    }

    /**
     * Operation generateWebhookSecretWithHttpInfo
     *
     * Generate new webhook secret
     *
     * @return Array of \Swagger\Client\Model\WebhookSettings, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function generateWebhookSecretWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1/account/webhook_settings/secret";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\WebhookSettings',
                '/v1/account/webhook_settings/secret'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\WebhookSettings', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\WebhookSettings', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCurrentAccount
     *
     * Get account
     *
     * @return \Swagger\Client\Model\Account
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCurrentAccount()
    {
        list($response) = $this->getCurrentAccountWithHttpInfo();
        return $response;
    }

    /**
     * Operation getCurrentAccountWithHttpInfo
     *
     * Get account
     *
     * @return Array of \Swagger\Client\Model\Account, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCurrentAccountWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1/account";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Account',
                '/v1/account'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Account', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Account', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDiscountSettings
     *
     * Get discount settings
     *
     * @return \Swagger\Client\Model\DiscountSettings
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getDiscountSettings()
    {
        list($response) = $this->getDiscountSettingsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getDiscountSettingsWithHttpInfo
     *
     * Get discount settings
     *
     * @return Array of \Swagger\Client\Model\DiscountSettings, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getDiscountSettingsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1/account/discount_settings";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DiscountSettings',
                '/v1/account/discount_settings'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DiscountSettings', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DiscountSettings', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMailSettings
     *
     * Get mail settings
     *
     * @return \Swagger\Client\Model\MailSettings
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMailSettings()
    {
        list($response) = $this->getMailSettingsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getMailSettingsWithHttpInfo
     *
     * Get mail settings
     *
     * @return Array of \Swagger\Client\Model\MailSettings, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getMailSettingsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1/account/mail_settings";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\MailSettings',
                '/v1/account/mail_settings'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\MailSettings', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MailSettings', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPrivateKeys
     *
     * Get list of private keys
     *
     * @return \Swagger\Client\Model\Key[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPrivateKeys()
    {
        list($response) = $this->getPrivateKeysWithHttpInfo();
        return $response;
    }

    /**
     * Operation getPrivateKeysWithHttpInfo
     *
     * Get list of private keys
     *
     * @return Array of \Swagger\Client\Model\Key[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPrivateKeysWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1/account/privkey";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Key[]',
                '/v1/account/privkey'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Key[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Key[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPublicKeys
     *
     * Get list of public keys
     *
     * @return \Swagger\Client\Model\Key[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPublicKeys()
    {
        list($response) = $this->getPublicKeysWithHttpInfo();
        return $response;
    }

    /**
     * Operation getPublicKeysWithHttpInfo
     *
     * Get list of public keys
     *
     * @return Array of \Swagger\Client\Model\Key[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPublicKeysWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1/account/pubkey";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Key[]',
                '/v1/account/pubkey'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Key[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Key[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWebhookSettings
     *
     * Get webhook settings
     *
     * @return \Swagger\Client\Model\WebhookSettings
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getWebhookSettings()
    {
        list($response) = $this->getWebhookSettingsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getWebhookSettingsWithHttpInfo
     *
     * Get webhook settings
     *
     * @return Array of \Swagger\Client\Model\WebhookSettings, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getWebhookSettingsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1/account/webhook_settings";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\WebhookSettings',
                '/v1/account/webhook_settings'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\WebhookSettings', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\WebhookSettings', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAccountJson
     *
     * Update account
     *
     * @param \Swagger\Client\Model\UpdateAccount $body  (optional)
     * @return \Swagger\Client\Model\Account
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateAccountJson($body = null)
    {
        list($response) = $this->updateAccountJsonWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateAccountJsonWithHttpInfo
     *
     * Update account
     *
     * @param \Swagger\Client\Model\UpdateAccount $body  (optional)
     * @return Array of \Swagger\Client\Model\Account, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateAccountJsonWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/v1/account";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Account',
                '/v1/account'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Account', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Account', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateDiscountSettings
     *
     * Update discount settings
     *
     * @param \Swagger\Client\Model\DiscountSettings $body  (optional)
     * @return \Swagger\Client\Model\DiscountSettings
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateDiscountSettings($body = null)
    {
        list($response) = $this->updateDiscountSettingsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateDiscountSettingsWithHttpInfo
     *
     * Update discount settings
     *
     * @param \Swagger\Client\Model\DiscountSettings $body  (optional)
     * @return Array of \Swagger\Client\Model\DiscountSettings, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateDiscountSettingsWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/v1/account/discount_settings";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DiscountSettings',
                '/v1/account/discount_settings'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DiscountSettings', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DiscountSettings', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateMailSettingsJson
     *
     * Update mail settings
     *
     * @param \Swagger\Client\Model\MailSettings $body  (optional)
     * @return \Swagger\Client\Model\MailSettings
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateMailSettingsJson($body = null)
    {
        list($response) = $this->updateMailSettingsJsonWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateMailSettingsJsonWithHttpInfo
     *
     * Update mail settings
     *
     * @param \Swagger\Client\Model\MailSettings $body  (optional)
     * @return Array of \Swagger\Client\Model\MailSettings, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateMailSettingsJsonWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/v1/account/mail_settings";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\MailSettings',
                '/v1/account/mail_settings'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\MailSettings', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MailSettings', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWebhookSettingsJson
     *
     * Update webhook settings
     *
     * @param \Swagger\Client\Model\UpdateWebhookSettings $body  (optional)
     * @return \Swagger\Client\Model\WebhookSettings
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateWebhookSettingsJson($body = null)
    {
        list($response) = $this->updateWebhookSettingsJsonWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateWebhookSettingsJsonWithHttpInfo
     *
     * Update webhook settings
     *
     * @param \Swagger\Client\Model\UpdateWebhookSettings $body  (optional)
     * @return Array of \Swagger\Client\Model\WebhookSettings, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateWebhookSettingsJsonWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/v1/account/webhook_settings";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\WebhookSettings',
                '/v1/account/webhook_settings'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\WebhookSettings', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\WebhookSettings', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
